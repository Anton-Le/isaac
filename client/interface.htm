<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>ISAAC Control Page</title>
</head>
<body>
<h3>Preview and camera setting</h3>
<p>Usage:
<ul>
<li>Left click + Mouse movement: Change view angle</li>
<li>Right click + Mouse movement: Change position</li>
<li>Mousewheel: zoom</li>
</ul>
<form>Server URL:<input type="text" id="url" value="127.0.0.1"> Port:<input type="text" id="port" value="2459"><input type="button" value="Connect" id="connect"></form>
<div id="status">Status: Not connected</div>
</p>
<table><tr>
<td id="video_td" valign="top">
	<!--canvas id="video" width="512" height="512" style="border:1px solid #000000;"></canvas-->
	<embed type="application/x-vlc-plugin" id="video" width="512" height="512" autoplay="no" controls="false"/>
</td>
<td id="preview_td" valign="top">
	<canvas id="preview" width="512" height="512" style="border:1px solid #000000;"></canvas>
	<form><input type="button" value="Send example metadada" id="metadata"><input type="button" value="Stop observing" id="stop"><input type="button" value="Stop simulation" id="exit"></form>
</td>
</tr></table>
<div id="list_td" style="display:none">
	<h3 id="isaac_name"></h3>
	<table id="list_table" border="1">
	<tr>
		<th>Name</th>
		<th>ID</th>
		<th>Nodes</th>
		<th>Max chain</th>
		<th>Dimension</th>
		<th>Sources</th>
		<th>Meta data</th>
		<th>Observe</th>
	</tr>
	</table>
	<div contentEditable="true" id="debug">Debug Infos</div>
</div>
</body>
<script>
var preview = document.getElementById("preview");
var video = document.getElementById("video");
var ctx = preview.getContext("2d");
var socket = null;
var observe_id = -1;
var particles = null;

var plugins = new Array();


var projection = [
	1, 0, 0, 0,
	0, 1, 0, 0,
	0, 0, 1, 0,
	0, 0, 0, 1
];
var modelview = [
	1, 0, 0, 0,
	0, 1, 0, 0,
	0, 0, 1, 0,
	0, 0, 0, 1
];
var rotation = [
	1, 0, 0, 0,
	0, 1, 0, 0,
	0, 0, 1, 0,
	0, 0, 0, 1
];
var znear = 0;

var edges = [
	[ -1,  1,  1 ],
	[  1,  1,  1 ],
	[  1, -1,  1 ],
	[ -1, -1,  1 ],
	[ -1,  1, -1 ],
	[  1,  1, -1 ],
	[  1, -1, -1 ],
	[ -1, -1, -1 ]
];

function updateZNear()
{
	znear = projection[ 0] * preview.clientWidth / 2;
}

function mulMatrix( matrix1 , matrix2)
{
	var result = new Array(16);
	for (x = 0; x < 4; x++)
		for (y = 0; y < 4; y++)
			result[y+x*4] = matrix1[y+0*4] * matrix2[0+x*4]
			              + matrix1[y+1*4] * matrix2[1+x*4]
			              + matrix1[y+2*4] * matrix2[2+x*4]
			              + matrix1[y+3*4] * matrix2[3+x*4];
	return result;
}

function mulMatrix4(p,matrix)
{
	var t = new Array(4);
	t[0] =  matrix[ 0] * p[0] + matrix[ 4] * p[1] +  matrix[ 8] * p[2] + matrix[12] * p[3];
	t[1] =  matrix[ 1] * p[0] + matrix[ 5] * p[1] +  matrix[ 9] * p[2] + matrix[13] * p[3];
	t[2] =  matrix[ 2] * p[0] + matrix[ 6] * p[1] +  matrix[10] * p[2] + matrix[14] * p[3];
	t[3] =  matrix[ 3] * p[0] + matrix[ 7] * p[1] +  matrix[11] * p[2] + matrix[15] * p[3];
	return t;
}

function rotateMatrix( x, y, z, rad )
{
	//Rotation matrix:
	var s = Math.sin( rad * Math.PI / 360.0);
	var c = Math.cos( rad * Math.PI / 360.0);
	var l = Math.sqrt( x * x + y * y + z * z);
	if ( l == 0 )
		return;
	x = x / l;
	y = y / l;
	z = z / l;
	var rotate = new Array(16);
	rotate[ 0] = c + x * x * ( 1 - c );
	rotate[ 4] = x * y * ( 1 - c ) - z * s;
	rotate[ 8] = x * z * ( 1 - c ) + y * s;
	rotate[12] = 0;
	rotate[ 1] = y * x * ( 1 - c ) + z * s;
	rotate[ 5] = c + y * y * ( 1 - c );
	rotate[ 9] = y * z * ( 1 - c ) - x * s;
	rotate[13] = 0;
	rotate[ 2] = z * x * ( 1 - c ) - y * s;
	rotate[ 6] = z * y * ( 1 - c ) + x * s;
	rotate[10] = c + z * z * ( 1 - c );
	rotate[14] = 0;
	rotate[ 3] = 0;
	rotate[ 7] = 0;
	rotate[11] = 0;
	rotate[15] = 1;

	return rotate;
}

function mulMatrix3(p,matrix)
{
	return mulMatrix4([p[0],p[1],p[2],1],matrix);
}

function translateMatrix(x,y,z)
{
	return [1,0,0,0,0,1,0,0,0,0,1,0,x,y,z,1];
}

function project(p)
{
	var m = mulMatrix4(mulMatrix3(p,modelview),projection);
	var t = new Array(2);
	t[0] = preview.clientWidth/2  + m[0] / m[3] * preview.clientWidth/2;
	t[1] = preview.clientHeight/2 + m[1] / m[3] * preview.clientHeight/2;
	t[2] = m[2];
    return t;
}

function line(p1,p2)
{
	var t1 = project(p1);
	var t2 = project(p2);
	if ((t1[2] < 0) || (t2[2] < 0))
		return;
	ctx.moveTo( t1[0], t1[1] );
	ctx.lineTo( t2[0], t2[1] );
}

function point(p)
{
	var t = project(p);
	if (t[2] < 0)
		return;
	ctx.fillRect( t[0], t[1], 3, 3 );
}	


function drawUnitCube()
{
	//front
	line( edges[0], edges[1] );
	line( edges[1], edges[2] );
	line( edges[2], edges[3] );
	line( edges[3], edges[0] );
	//back
	line( edges[4], edges[5] );
	line( edges[5], edges[6] );
	line( edges[6], edges[7] );
	line( edges[7], edges[4] );
	//connetion
	line( edges[0], edges[4] );
	line( edges[1], edges[5] );
	line( edges[2], edges[6] );
	line( edges[3], edges[7] );
}

function redraw()
{
	ctx.clearRect(0, 0, preview.clientWidth, preview.clientHeight);
	ctx.fillStyle = "#000000";
	var temp = modelview;
	ctx.beginPath();
	modelview = mulMatrix(modelview,rotation)
	drawUnitCube();
	for (p in particles)
	{
		point( particles[p] );
	}
	modelview = temp;
	ctx.stroke();
}

function sendMatrix(name,matrix)
{
	var obj =
	{
		"type" : "feedback neighbour",
		"observe id" : observe_id
	};
	obj[name] = matrix;
	socket.send(JSON.stringify(obj));
}

function mouseWheelHandler(e)
{
	document.body.style.overflowY = "hidden";
	var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
	modelview = mulMatrix(modelview,translateMatrix(0,0,delta));
	redraw();
	ctx.fillText("Delta: " + delta,1,10);
	sendMatrix("modelview",modelview);
}

var mousedown = [0,0,0];
var mousex = 0;
var mousey = 0;
function mouseDownHandler(e)
{
	mousedown[e.button] = 1;
	mousex = e.clientX;
	mousey = e.clientY;
}
function mouseUpHandler(e)
{
	mousedown[e.button] = 0;
}
function mouseResetHandler()
{
	mousedown[0] = 0;
	mousedown[1] = 0;
	mousedown[2] = 0;
}

function mouseMoveHandler(e)
{
	var dx = e.clientX - mousex;
	var dy = e.clientY - mousey;
	var obj;
	if (mousedown[0])
	{
		var l = Math.sqrt( dx * dx + dy * dy );
		if (l > 0)
		{
			dx /= l;
			dy /= -l;
			rotation = mulMatrix(rotateMatrix(dy,dx,0,l),rotation);
		}
		sendMatrix("rotation",rotation);
	}
	if (mousedown[2] || mousedown[1])
	{
		modelview = mulMatrix(modelview,translateMatrix(dx/100,dy/100,0,l));
		sendMatrix("modelview",modelview);
	}
	redraw();
	mousex = e.clientX;
	mousey = e.clientY;
}

ctx.font = "10px Arial";
redraw();
preview.addEventListener("mousewheel", mouseWheelHandler, false);
preview.addEventListener("DOMMouseScroll", mouseWheelHandler, false);
preview.addEventListener("mousemove", mouseMoveHandler, false);
preview.addEventListener("mousedown", mouseDownHandler, false);
preview.addEventListener("mouseup", mouseUpHandler, false);
preview.onmouseout = function(){mouseResetHandler(); document.body.style.overflowY = "scroll";};

document.getElementById("video_td").style.display = 'none';
document.getElementById("preview_td").style.display = 'none';

function stopObserverSimulation()
{
	if (observe_id < 0)
		return;
	var obj =
	{
		"type" : "stop",
		"observe id" : observe_id
	};
	socket.send(JSON.stringify(obj));
	observe_id = -1;
}

function observeSimulation(id)
{
	stopObserverSimulation();
	observe_id = id;
	var obj =
	{
		"type" : "observe",
		"observe id" : observe_id
	};
	socket.send(JSON.stringify(obj));
}

document.getElementById("connect").onclick = function()
{
	if (socket != null && socket.readyState == 1)
	{
		socket.send(JSON.stringify({"type" : "closed"}));
		socket.close();
		socket.onclose();
	}
	else //Open
	{
		url = "ws://" + document.getElementById("url").value + ":" + document.getElementById("port").value;
		if (typeof MozWebSocket != "undefined")
			socket = new MozWebSocket( url , "isaac-json-protocol" );
		else
			socket = new WebSocket( url , "isaac-json-protocol" );
		try
		{
			socket.onopen = function()
			{
				document.getElementById("status").textContent = "Status: Connected";
				document.getElementById("connect").value = "Close";
			};
			socket.onmessage = function got_packet(msg)
			{
				var obj = JSON.parse(msg.data);
				if (obj["type"] == "hello")
				{
					document.getElementById("isaac_name").textContent = obj["name"];
					var table = document.getElementById("list_table");
					while (table.rows.length > 1)
						table.deleteRow(1);
					document.getElementById("list_td").style.display = 'initial';
				}
				if (obj["type"] == "register")
				{
					plugins.push(obj);
					var table = document.getElementById("list_table");					
					var row = table.insertRow(-1);
					row.id = obj["id"];
					row.insertCell(0).innerHTML = obj["name"];
					row.insertCell(1).innerHTML = obj["id"];
					row.insertCell(2).innerHTML = obj["nodes"];
					row.insertCell(3).innerHTML = obj["max chain"];
					var cell = row.insertCell(4);
					var d = obj["dimension"];
					cell.innerHTML += obj["width"];
					if (d > 1)
						cell.innerHTML += " * " + obj["height"];
					if (d > 2)
						cell.innerHTML += " * " + obj["depth"];
					var cell = row.insertCell(5);
					for (element in obj["sources"])
					{
						var e = obj["sources"][element]
						cell.innerHTML += "<b>" + e["name"] + ":</b><br/>";
						cell.innerHTML += " Feature dimension(" + e["feature dimension"] + ")<br/>";
					}
					var cell = row.insertCell(6);//.innerHTML = obj["metadata"].toSource();
					for (element in obj["metadata"])
					{
						cell.innerHTML += "<b>" + element + ":</b> ";
						cell.innerHTML += obj["metadata"][element];
						cell.innerHTML += "<br/>";
					}
					var observeCell = row.insertCell(7);
					var button = document.createElement("input");
					button.type = "button";
					button.value = "Observe";
					button.onclick = function()
					{
						var global_size = [ obj["width"],  obj["height"], obj["depth"] ];
						var m = Math.max( global_size[0], global_size[1], global_size[2] );
						edges = [
							[ -global_size[0] / m,  global_size[1] / m,  global_size[2] / m ],
							[  global_size[0] / m,  global_size[1] / m,  global_size[2] / m ],
							[  global_size[0] / m, -global_size[1] / m,  global_size[2] / m ],
							[ -global_size[0] / m, -global_size[1] / m,  global_size[2] / m ],
							[ -global_size[0] / m,  global_size[1] / m, -global_size[2] / m ],
							[  global_size[0] / m,  global_size[1] / m, -global_size[2] / m ],
							[  global_size[0] / m, -global_size[1] / m, -global_size[2] / m ],
							[ -global_size[0] / m, -global_size[1] / m, -global_size[2] / m ]
						];
						document.getElementById("video_td").style.display = 'table-cell';
						document.getElementById("preview_td").style.display = 'table-cell';
						document.getElementById("debug").textContent = "Debug Infos";
						projection = obj["projection"];
						modelview = obj["modelview"];
						rotation = obj["rotation"];
						preview.width = obj["framebuffer width"];
						preview.height = obj["framebuffer height"];
						video.width = obj["framebuffer width"];
						video.height = obj["framebuffer height"];
						video.playlist.items.clear();
						observeSimulation(obj["id"]);
					};
					observeCell.appendChild(button);
				}
				if (obj["type"] == "register video")
				{
					var url = "http://" + document.getElementById("url").value + ":" + document.getElementById("port").value + "/" + obj["connector"] + "/" + obj["name"] + "/" + obj["reference"];
					video.playlist.add( url );
					document.getElementById("debug").textContent =  url;
					video.playlist.play();
				}
				if (obj["type"] == "period merge" || obj["type"] == "period master" || obj["type"] == "feedback neighbour")
				{
					if (obj.hasOwnProperty("metadata"))
					{
						if (obj["metadata"].hasOwnProperty("reference particles"))
							particles = obj["metadata"]["reference particles"];
						document.getElementById("debug").innerHTML = JSON.stringify(obj["metadata"]).replace(/{/g,"<br/>{").replace(/}/g,"}<br/>");
					}
					if (obj.hasOwnProperty("projection"))
						projection = obj["projection"];
					if (obj.hasOwnProperty("modelview"))
						modelview = obj["modelview"];
					if (obj.hasOwnProperty("rotation"))
						rotation = obj["rotation"];
					redraw();
				}
				if (obj["type"] == "exit")
				{
					var table = document.getElementById("list_table");					
					for (var c = 1; c < table.rows.length;c++)
						if (table.rows[c].id == obj["id"])
						{
							table.deleteRow(c);
							break;
						}
					if (observe_id == obj["id"])
					{
						document.getElementById("video_td").style.display = 'none';
						document.getElementById("preview_td").style.display = 'none';
						video.playlist.stop();
					}
				}
			};
			socket.onclose = function()
			{
				if (document.getElementById("status").textContent != "Status: An error occured. Wrong address, network gone or server not started?")
					document.getElementById("status").textContent = "Status: Closed";
				document.getElementById("connect").value = "Connect";
				document.getElementById("list_td").style.display = 'none';
				document.getElementById("video_td").style.display = 'none';
				document.getElementById("preview_td").style.display = 'none';
			};
			socket.onerror = function()
			{
				document.getElementById("status").textContent = "Status: An error occured. Wrong address, network gone or server not started?";
			};
		}
		catch(exception)
		{
			document.getElementById("status").textContent = "Status: Error" + exception;
		}
	}
};

document.getElementById("stop").onclick = function()
{
	document.getElementById("video_td").style.display = 'none';
	document.getElementById("preview_td").style.display = 'none';
	stopObserverSimulation();
}

document.getElementById("metadata").onclick = function()
{
	var obj =
	{
		"type" : "feedback",
		"observe id" : observe_id,
		"metadata" :
		{
			"some string" : "Jet fuel doesn't melt steel beams!",
			"some int" : 42
		}
	};
	socket.send(JSON.stringify(obj));
}

document.getElementById("exit").onclick = function()
{
	var obj =
	{
		"type" : "feedback",
		"observe id" : observe_id,
		"metadata" :
		{
			"exit" : 1
		}
	};
	socket.send(JSON.stringify(obj));
	document.getElementById("stop").onclick();
}


/*function setFrustum(left, right, bottom, top, znear, zfar )
{
	var znear2 = znear * 2;
	var width = right - left;
	var height = top - bottom;
	var zRange = znear - zfar;
	projection[ 0] = znear2 / width;
	projection[ 1] = 0;
	projection[ 2] = 0;
	projection[ 3] = 0;
	projection[ 4] = 0;
	projection[ 5] = znear2 / height;
	projection[ 6] = 0;
	projection[ 7] = 0;
	projection[ 8] = ( right + left ) / width;
	projection[ 9] = ( top + bottom ) / height;
	projection[10] = ( zfar + znear) / zRange;
	projection[11] = -1;
	projection[12] = 0;
	projection[13] = 0;
	projection[14] = ( -znear2 * zfar ) / -zRange;
	projection[15] = 0;
}

function setPerspective( fovyInDegrees, aspectRatio, __znear, zfar )
{
	znear = __znear;
	var ymax = znear * Math.tan( fovyInDegrees * Math.PI / 360.0 );
	var xmax = ymax * aspectRatio;
	setFrustum( -xmax, xmax, -ymax, ymax, znear, zfar );
}*/

</script>
</html>
